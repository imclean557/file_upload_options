<?php

/**
 * @file
 * Contains file_upload_options.module.
 */

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\File\FileSystemInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\file\Plugin\Field\FieldType\FileFieldItemList;
use Drupal\Core\Render\Element;

/**
 * Implements hook_form_alter().
 */
function file_upload_options_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  // Use the File Upload Service.
  $fileUploadService = \Drupal::service('file_upload_options.file_upload_service');
  $supportedFields = $fileUploadService->getSupportedFields();

  // Check there's an entity to get.
  if (method_exists($form_state->getFormObject(), 'getEntity')) {
    // Get entity details.
    $entity = $form_state->getFormObject()->getEntity();
    $entityBundle = $entity->getEntityTypeId() . '.' . $entity->bundle() . '.';
    file_upload_options_add_callbacks($form, $supportedFields, $entityBundle);
  }
  else {
    file_upload_options_process_custom_fields($form);
  }

}

/**
 * 
 * @param array $form
 *   The form arraay.
 * 
 * @param array $supportedFields
 *   Array of supported file fields.
 *
 * @param type $entityData
 *   Entity fields and properties.
 * 
 * @param type $entityBundle
 *   The entity bundle.
 */
function file_upload_options_add_callbacks(&$form, $supportedFields, $entityBundle) {
  foreach (Element::children($form) as $fieldName) {
    $field = &$form[$fieldName];
    if (!empty(Element::children($field)) && (!array_key_exists('#type', $field) || file_upload_options_is_container($field))) {
      file_upload_options_add_callbacks($field, $supportedFields, $entityBundle);
    }
    else {
      foreach ($supportedFields as $fieldData) {
        // Check if the field is supported.         
        if (array_key_exists($entityBundle . $fieldName, $fieldData)) {
          // Change the valueCallback.
          foreach (Element::children($form[$fieldName]['widget']) as $delta => $widget) {
            $form[$fieldName]['widget'][$delta]['#value_callback'] = ['Drupal\file_upload_options\Services\FileUploadService', 'value'];
          }
        }
      }
    }
  }
}

function file_upload_options_is_container($element) {
  $containers = [
    'details',
    'fieldset',
    'field_group',
    'vertial_tabs',
    '_layout_builder'
  ];  
  return in_array($element['#type'], $containers);  
}

/**
 * Look for custom fields not managed by an entity.
 *
 * @param array $form
 *   The form array.
 */
function file_upload_options_process_custom_fields(array &$form) {
  $config = \Drupal::service('config.factory')->getEditable('file_upload_options.settings');
  $customFields = $config->get('custom_fields');

  $fields = file_upload_options_get_file_fields($form);
  if ($fields) {
    foreach ($fields as $fieldName => &$field) {
      if (!array_key_exists($fieldName, $customFields)) {
        // Set a default value.
        $config->set('custom_fields.' . $fieldName, 0);
        $config->save();
      }
    }
  }
}

/**
 * Gets nested fields.
 *
 * @param array $container
 *   Form array or other field container.
 */
function file_upload_options_get_file_fields(array &$container) {
  $fields = [];
  foreach (Element::children($container) as $fieldName) {
    $field = &$container[$fieldName];
    if (!array_key_exists('#type', $field) || $field['#type'] == 'details' || $field['#type'] == 'fieldset') {
      $fields += file_upload_options_get_file_fields($field);
    }
    else {
      if ($field['#type'] === 'managed_file' || $field['#type'] === 'image') {
        $fields[$fieldName] = &$field;
      }
    }
  }
  return $fields;
}

/**
 * Saves any files that have been uploaded into a managed_file element.
 *
 * @param array $element
 *   The FAPI element whose values are being saved.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 *
 * @return array|false
 *   An array of file entities for each file that was saved, keyed by its file
 *   ID. Each array element contains a file entity. Function returns FALSE if
 *   upload directory could not be created or no files were uploaded.
 */
function file_upload_options_file_managed_file_save_upload(array $element, FormStateInterface $form_state) {
  
  // Check if it's an inline entity form.
  if ($form_state->get('inline_entity_form')) {
    // It's a convoluted path just to get the bundle of the referenced entity.
    $fieldParent = $element['#field_parents'][0];
    $iefId = $form_state->getCompleteForm()[$fieldParent]['widget']['#ief_id'];
    $bundle = $form_state->get('inline_entity_form')[$iefId]['entities'][0]['entity']->bundle();    
    $fileId = $element['#entity_type'] . '.' . $bundle . '.' . $element['#field_name'];  
    $isCustomField = FALSE;
  }
  // Check there is an entity and that it actually contains the element.
  if (method_exists($form_state->getFormObject(), 'getEntity') && array_key_exists('#entity_type', $element)) {
    $fileId = $element['#entity_type'] . '.' . $form_state->getFormObject()->getEntity()->bundle() . '.' . $element['#field_name'];
    $isCustomField = FALSE;
  }
  else {
    // Otherwise it's a custom field without an entity or the field name doesn't
    // match any of the entity's fields.
    $fileId = $element['#name'];
    $isCustomField = TRUE;
  }
  $upload_name = implode('_', $element['#parents']);
  $all_files = \Drupal::request()->files->get('files', []);
  if (empty($all_files[$upload_name])) {
    return FALSE;
  }
  $file_upload = $all_files[$upload_name];

  $destination = isset($element['#upload_location']) ? $element['#upload_location'] : NULL;
  if (isset($destination) && !\Drupal::service('file_system')->prepareDirectory($destination, FileSystemInterface::CREATE_DIRECTORY)) {
    \Drupal::logger('file')->notice('The upload directory %directory for the file field %name could not be created or is not accessible. A newly uploaded file could not be saved in this directory as a consequence, and the upload was canceled.', ['%directory' => $destination, '%name' => $element['#field_name']]);
    $form_state->setError($element, t('The file could not be uploaded.'));
    return FALSE;
  }

  // Save attached files to the database.
  $files_uploaded = $element['#multiple'] && count(array_filter($file_upload)) > 0;
  $files_uploaded |= !$element['#multiple'] && !empty($file_upload);
  if ($files_uploaded) {
    // Get replace option.
    $fileUploadService = \Drupal::service('file_upload_options.file_upload_service');
    if ($isCustomField) {
      $replaceOption = $fileUploadService->getConfig()->get('custom_fields')[$fileId];
    }
    else {
      $replaceOption = $fileUploadService->getConfig()->get('upload_option.' . $fileId);
    }

    if (!$files = _file_save_upload_from_form($element, $form_state, NULL, $replaceOption)) {
      \Drupal::logger('file')->notice('The file upload failed. %upload', ['%upload' => $upload_name]);
      return [];
    }

    // Value callback expects FIDs to be keys.
    $files = array_filter($files);
    $fids = array_map(function ($file) {
      return $file->id();
    }, $files);

    return empty($files) ? [] : array_combine($fids, $files);
  }

  return [];
}

/**
 * Implements hook_options_element_info_alter().
 */
function file_upload_options_element_info_alter(array &$info) {
  if (array_key_exists('managed_file', $info)) {
    // Add custom value_callback.
    $info['managed_file']['#value_callback'] = ['Drupal\file_upload_options\Services\FileUploadService', 'valueCallback'];
  }
}

/**
 * Implements hook_rest_resource_alter().
 */
function file_upload_options_rest_resource_alter(&$definitions) {
  if (isset($definitions['file:upload'])) {
    $definitions['file:upload']['class'] = 'Drupal\file_upload_options\Plugin\rest\resource\FileUploadOptionsResource';
  }
}

/**
 * Implements hook_filefield_paths_process_file().
 */
function file_upload_options_filefield_paths_process_file(ContentEntityInterface $entity, FileFieldItemList $field, array &$settings = []) {
  $fileId = $entity->getEntityType()->id() . '.' . $entity->bundle() . '.' . $field->getName();
  $fileUploadService = \Drupal::service('file_upload_options.file_upload_service');
  $settings['replace'] = $fileUploadService->getConfig()->get('upload_option.' . $fileId) ?? FileSystemInterface::EXISTS_RENAME;
}

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 */
function file_upload_options_inline_entity_form_entity_form_alter(&$entity_form, FormStateInterface $form_state) {
  // Use the File Upload Service.
  $fileUploadService = \Drupal::service('file_upload_options.file_upload_service');
  $supportedFields = $fileUploadService->getSupportedFields();  
  $entityBundle = $entity_form['#entity_type'] . '.' . $entity_form['#bundle'] . '.';  

  // Add the callbacks.
  file_upload_options_add_callbacks($entity_form, $supportedFields, $entityBundle);
}
